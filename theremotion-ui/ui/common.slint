import { LineEdit } from "std-widgets.slint";
import { UIState } from "state.slint";
import { Status, Selectable } from "types.slint";
import "./fonts/NotoEmoji-Bold.ttf";
import "./fonts/NotoSans-Bold.ttf";

export global Palette {
    out property <color> pgreen: #096E00;
    out property <color> pcyan: #048A81;
    out property <color> ppink: #d484ca;
    out property <color> porange: #E77728;
    out property <color> pyellow: #F0F600;
    out property <color> pbeige: #f3e1bf;

    out property <color> active: porange;
    out property <color> inactive: porange.darker(200%);

    out property <color> neutral-bright: pbeige;
    out property <color> neutral-dark: porange.darker(500%);

    out property <color> win-bg: pbeige.darker(6);

    out property <color> tab-bg: neutral-bright;
    out property <color> plot-bg: group-bg;
    out property <color> group-bg: neutral-dark;
    out property <brush> screen-bg: @radial-gradient(circle,#ffffff21 0%, #ffffff00 100%);

    out property <color> button-inactive: neutral-bright;
    out property <color> button-active: porange;
    out property <color> button-hover: button-inactive.brighter(20%);
    out property <brush> button-text: neutral-dark;

    out property <color> plot-grad: pgreen;
    out property <color> plot-grad-text: neutral-bright;
    out property <color> lead: pcyan;
    out property <color> drone: ppink;
    out property <color> raw: porange;
    out property <color> root-note: pyellow;
    out property <color> guitar: pgreen;

    out property <color> white-key: raw;
    out property <color> black-key: white-key.darker(0.5);

    
    out property <brush> white-key-active: @linear-gradient(0deg, pcyan 0%, pcyan 25%, neutral-bright 75%, neutral-bright 100%);
    out property <brush> black-key-active: @linear-gradient(0deg, pcyan 0%, pcyan 25%, neutral-dark 75%, neutral-dark 100%);
    out property <color> white-key-disabled: neutral-bright;
    out property <color> black-key-disabled: white-key-disabled.darker(0.5);

    out property <brush> key-lead-overlay: @linear-gradient(0deg, lead 0%, lead.with-alpha(0) 75%, lead.with-alpha(0) 100%);
    out property <brush> key-drone-overlay: @linear-gradient(0deg, drone 0%, drone 20%, drone.with-alpha(0) 75%, drone.with-alpha(0));
}

export global Style {
    out property <length> area-padding: 8px;
    out property <length> area-spacing: 8px;

    out property <length> area-corner-radius: 10px;
    out property <length> grad-extralight-thickness: 1px;
    out property <length> grad-light-thickness: 2px;
    out property <length> grad-strong-thickness: 5px;
    out property <length> grad-font-size: 20px;
}

export component HL inherits HorizontalLayout {
    padding: Style.area-padding;
    spacing: Style.area-spacing;
}

export component VL inherits VerticalLayout {
    padding: Style.area-padding;
    spacing: Style.area-spacing;
}

export component GL inherits GridLayout {
    padding: Style.area-padding;
    spacing: Style.area-spacing;
}

export component IHL inherits HorizontalLayout {
    padding: 0px;
    spacing: Style.area-spacing;
}

export component IVL inherits VerticalLayout {
    padding: 0px;
    spacing: Style.area-spacing;
}

export component IGL inherits GridLayout {
    padding: 0px;
    spacing: Style.area-spacing;
}

export component ScreenGlare {
    width: 100%;
    height: 100%;
    Rectangle {
        property <length> xoffset: root.width*0.5;
        property <length> yoffset: root.height*0.6;
        x: -xoffset;
        y: -yoffset;
        width: root.width + xoffset;
        height: root.height+ yoffset;
        background: Palette.screen-bg;
    }
}

export component BevelRectangle inherits Rectangle {
    in property <color> bevel-color: self.background;
    in property <angle> bevel-angle: get-bevel-angle();
    in property <bool> extruded: true;
    in property <float> contrast: 30%;
    clip: true;

    function get-bevel-angle() -> angle {
        // https://github.com/slint-ui/slint/issues/3730
        -45deg
        //-Math.atan(root.height / root.width)
    }

    property <color> bevel-color-dark: bevel-color.darker(contrast);
    property <color> bevel-color-bright: bevel-color.brighter(contrast);
    property <color> bevel-color-1: extruded ? bevel-color-dark : bevel-color-bright;
    property <color> bevel-color-2: extruded ? bevel-color-bright : bevel-color-dark;

    border-width: 4px;
    border-radius: Style.area-corner-radius;
    border-color: @linear-gradient(bevel-angle, bevel-color-1 0%, bevel-color-1 40%, bevel-color-2 60%, bevel-color-2 100%);
}



export component Circle inherits Rectangle {
    in property <length> radius;
    in property <length> center-x;
    in property <length> center-y;
    height: self.width;

    function effective-radius() -> length {
        radius + self.border-width / 2
    }
    width: effective-radius()*2;
    border-radius: effective-radius();
    x: center-x - effective-radius();
    y: center-y - effective-radius();
}

export component BevelCircle inherits BevelRectangle {
    in property <length> radius;
    in property <length> center-x;
    in property <length> center-y;
    height: self.width;

    function effective-radius() -> length {
        radius + self.border-width / 2
    }
    width: effective-radius()*2;
    border-radius: effective-radius();
    x: center-x - effective-radius();
    y: center-y - effective-radius();
}

export component Tab {
    in property <int> idx;
    in property <int> current-idx;
    preferred-width: 100%;
    preferred-height: 100%;

    Rectangle {
        background: Palette.tab-bg;
        clip: true;
        y: current-idx == idx ? 0 : current-idx < idx ? self.height + 1px : - self.height - 1px;
        animate y { duration: 125ms; easing: ease; }
        property <length> cx: 0px;
        property <length> cy: self.height;
        for color[idx] in [Palette.pcyan, Palette.pgreen, Palette.porange, Palette.ppink, Palette.pyellow]: Circle {
            Circle {
                center-x: cx;
                center-y: cy;
                radius: root.height + self.border-width*idx + 10px;
                border-color: color;
                border-width: 50px;
            }
        }
    
        @children
    }

}


export global Pitches {
    out property <[{value: int, text: string}]> pitches: [
        {value: 0, text: "C"},
        {value: 1, text: "C#"},
        {value: 2, text: "D"},
        {value: 3, text: "D#"},
        {value: 4, text: "E"},
        {value: 5, text: "F"},
        {value: 6, text: "F#"},
        {value: 7, text: "G"},
        {value: 8, text: "G#"},
        {value: 9, text: "A"},
        {value: 10, text: "A#"},
        {value: 11, text: "B"},
    ];
}



export component SmallText inherits Text {
    font-family: "Noto Sans";
    font-size: 15px;
    color: Palette.neutral-bright;
    vertical-alignment: TextVerticalAlignment.bottom;
    horizontal-alignment: TextHorizontalAlignment.center;
}

export component CaptionText inherits Text {
    font-family: "Noto Sans";
    font-size: 20px;
    color: Palette.neutral-bright;
    vertical-alignment: TextVerticalAlignment.bottom;
    horizontal-alignment: TextHorizontalAlignment.center;
}

export component TitleText inherits Text {
    font-family: "Noto Sans";
    font-size: 35px;
    color: Palette.button-text;
    vertical-alignment: TextVerticalAlignment.center;
    horizontal-alignment: TextHorizontalAlignment.center;
}

export component StatusText inherits Text {
    in property <Status> status;
    font-family: "Noto Sans";
    font-size: 20px;
    color: status == Status.Ok ? green : status == Status.Warning ? orange : red;
    vertical-alignment: TextVerticalAlignment.bottom;
    horizontal-alignment: TextHorizontalAlignment.left;
}

export component GradText inherits Text {
    font-family: "Noto Sans";
    color: Palette.plot-grad-text;
    font-size: 20px;
}

export component Led {
    in property <color> glass-color: Palette.inactive;
    in property <color> light-color: Palette.active;
    in property <float> light;
    width: 100%;

    BevelRectangle {
        border-width: 2px;
        width: 75%;
        height: 6px;

        border-radius: self.height / 2;
        background: light-color.mix(glass-color, light);// light ? light-color : glass-color;
        drop-shadow-color: light-color.with-alpha(light);
        drop-shadow-blur: 5px;
        animate background {
            duration: 250ms;
            easing: ease-out;
        }
        animate drop-shadow-color {
            duration: 250ms;
            easing: ease-out;
        }
    }
}

export component TouchButton {
    callback clicked <=> ta.clicked;
    in-out property <bool> checked;
    in property <string> text;
    in property <image> icon;
    in property <brush> active-color: Palette.button-active;
    in property <brush> inactive-color: Palette.button-inactive;
    in property <brush> hover-color: Palette.button-hover;
    in property <string> font-family: "Noto Sans";
    in property <length> font-size: 25px;
    in property <bool> checkable: true;

    BevelRectangle {
        background: ta.has-hover ? hover-color : inactive-color;
        
        contrast: checked ? 10% : 30%;
        animate background { duration: 100ms; easing: ease; }
        clip: true;

        if text != "": Text {
            y: root.height / 2 - self.font-size + 4px;
            vertical-alignment: TextVerticalAlignment.center;
            horizontal-alignment: TextHorizontalAlignment.center;
            font-family: font-family;
            font-size: font-size;
            text: text;
            color: Palette.button-text;
        }

        if text == "": Image {
            source: root.icon;
            colorize: Palette.button-text;
        }

        if checkable: Led {
            light-color: Palette.active;
            y: root.height * 0.75;
            light: checked ? 1.0 : 0.0;
        }

        
        ta:=TouchArea {}
    }
}

export component IconTouchButton inherits TouchButton {
    font-family: "Noto Emoji";
    width: 80px;
    height: 80px;
}

export component TextTouchButton inherits TouchButton {
    height: 70px;
}

component FaderInteraction inherits TouchArea {
    in property<float> maximum: 1;
    in property<float> minimum: 0;
    in property <float> move-speed: 1;
    in property<float> value: 0;
    in property <length> handle-height;
    callback changed(float);
    property <float> pressed-value;
    
    pointer-event(event) => {
        if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
            self.pressed-value = root.value;
        }
    }
    moved => {
        if (self.enabled && self.pressed) {
            changed(max(root.minimum, min(root.maximum,
                root.pressed-value - move-speed * (root.mouse-y - root.pressed-y) * (root.maximum - root.minimum) / (root.height - handle-height))));
        }
    }
}

component Fader {
    in property<float> maximum <=> touch.maximum;
    in property<float> minimum <=> touch.minimum;
    in-out property<float> value <=> touch.value;
    callback changed <=> touch.changed;

    min-height: 100px;
    width: 40px;
    horizontal-stretch: 0;
    vertical-stretch: 1;

    slider := Rectangle {
        clip: true;
        width: 10px;
        border-radius: self.width/2;
        background: touch.pressed ? Palette.button-inactive.brighter(50%) : Palette.button-inactive;
        border-width: 1px;
        border-color: Palette.button-inactive.darker(80%);

        Rectangle {
            height: root.height - handle.y;
            y: handle.y;
            background: Palette.active;
        }
    }

    handle := BevelRectangle {
        width: parent.width;
        height: 60px;
        background: touch.has-hover ? Palette.button-hover : Palette.button-inactive;
        border-width: 5px;
        y: (root.height - handle.height) * ( 1 - (root.value - root.minimum)/(root.maximum - root.minimum));

        Led {
            glass-color: Palette.raw;
            light: touch.pressed ? 1.0 : 0.0;
        }
    }
    touch := FaderInteraction {
        handle-height: handle.height;
    }
}

export component RotaryKnob {
    height: 80px;
    width: self.height;
    in property<float> maximum <=> touch.maximum;
    in property<float> minimum <=> touch.minimum;
    in-out property<float> value <=> touch.value;
    in property <angle> min-angle: 20deg;
    in property <angle> max-angle: 360deg - min-angle;
    property <angle> deadzone: 30deg;
    callback changed <=> touch.changed;
    property <float> radius-in: 0.4;
    property <float> radius-out: 0.7;
    touch := FaderInteraction {
        handle-height: 0;
        move-speed: 0.5;
    }

    function getangle(value: float) -> angle {
        deadzone + (360deg - deadzone * 2) * (value - minimum) / (maximum - minimum)
    }

    function getx(angle: angle) -> float {
        cos(-angle - 90deg)
    }
    function gety(angle: angle) -> float {
        sin(-angle + 90deg)
    }

    Path {
        fill: Palette.button-inactive;
        viewbox-x: -1;
        viewbox-y: -1;
        viewbox-width: 2;
        viewbox-height: 2;
        MoveTo {x: 0; y: 0;}
        LineTo {x: getx(deadzone); y: gety(deadzone);}
        ArcTo  {x: getx(-deadzone); y: gety(-deadzone); radius-x: 1; radius-y: 1; sweep: true; large-arc: true;}
        LineTo {x: 0; y: 0;}
    }

    // Active amount indicator
    Path {
        fill: Palette.active;
        viewbox-x: -1;
        viewbox-y: -1;
        viewbox-width: 2;
        viewbox-height: 2;
        MoveTo {x: 0; y: 0;}
        LineTo {x: getx(deadzone); y: gety(deadzone);}
        ArcTo  {
            x: getx(getangle(value));
            y: gety(getangle(value));
            radius-x: 1;
            radius-y: 1;
            sweep: true;
            large-arc:
            getangle(value) > (180deg + deadzone);
        }
        LineTo {x: 0; y: 0;}
    }

    for inc in 11: Path {
        private property <float> in: 0;
        private property <float> out: 1.1;
        private property <float> v: minimum + (maximum - minimum) * inc / 10;
        private property <angle> a: getangle(v);
        stroke: Palette.active.darker(50%);
        stroke-width: 4px;
        viewbox-x: -1;
        viewbox-y: -1;
        viewbox-width: 2;
        viewbox-height: 2;
        MoveTo {x: getx(a) * in; y: gety(a) * in;}
        LineTo {x: getx(a) * out; y: gety(a) * out;}
    }

    knob := BevelCircle {
        center-x: root.width/2;
        center-y: root.width/2;
        radius: 0.40*root.width;
        border-width: 8px;
        background: touch.has-hover ? Palette.button-hover : Palette.button-inactive;
    }

    BevelCircle {
        center-x: root.width/2;
        center-y: root.height/2;
        radius: 0.1*root.width;
        border-width: 2px;
        background: knob.background;
        extruded: true;
    }

    // Value indicator
    Path {
        stroke: Palette.active;
        stroke-width: 4px;
        viewbox-x: -1;
        viewbox-y: -1;
        viewbox-width: 2;
        viewbox-height: 2;
        MoveTo {
            x: getx(getangle(value)) * radius-in;
            y: gety(getangle(value)) * radius-in;
        }
        LineTo {x: getx(getangle(value)) * radius-out;
            y: gety(getangle(value)) * radius-out;
        }
    }
}

export component CaptionedFader {
    in property <string> text;
    in property <float> maximum <=> slider.maximum;
    in property <float> minimum <=> slider.minimum;
    in-out property <float> value <=> slider.value;
    callback changed <=> slider.changed;
    width: 80px;
    VerticalLayout {
        alignment: LayoutAlignment.stretch;
        slider := Fader {
            x: root.width / 2 - self.width / 2;
        }
        CaptionText { 
            text: text;
            font-size: 15px;
        }
    }
}

export component CaptionedRotaryKnob {
    in property <string> text;
    in property <float> maximum <=> slider.maximum;
    in property <float> minimum <=> slider.minimum;
    in-out property <float> value <=> slider.value;
    callback changed <=> slider.changed;
    width: 80px;
    VerticalLayout {
        alignment: LayoutAlignment.center;
        slider := RotaryKnob {
            x: root.width / 2 - self.width / 2;
        }
        CaptionText { 
            text: text;
            font-size: 15px;
            vertical-alignment: TextVerticalAlignment.top;
        }
    }
}

export component Group {
    in property <string> name;
    in property <bool> has-name: true;
    preferred-height: 100%;
    preferred-width: 100%;

    BevelRectangle {
        background: Palette.group-bg;
        extruded: false;

        ScreenGlare {}

        VerticalLayout {
            padding: has-name ? 4px : 0px;
            if has-name: HorizontalLayout {
                Rectangle {}
                txt:=CaptionText {
                    height: 25px;
                    text: name;
                }
                Rectangle {}
            }


            GL {
                padding: 4px;
                padding-top: 0px;
                @children
            }
        }
    }
}

export component SelectableButtons {
    in property <[Selectable]> options: [
        {name: "option 1", removable: true},
        {name: "option 2", selected: true},
        {name: "option 3"},
        {name: "option 4"},
        {name: "option 5", removable: true},
        {name: "option 6", removable: true}
    ];
    
    callback select-clicked(int);
    callback delete-clicked(int);

    Flickable {
        interactive: true;
        viewport-height: options.length * 84px;
        //height: 100%;
        for option[index] in options: HL {
            padding: 2px;
            spacing: 4px;
            height: 84px;
            y: self.height * index;
            TouchButton {
                text: option.name;
                checked: option.selected;
                clicked => {select-clicked(option.id)}
            }
            if option.removable: IconTouchButton {
                text: "🗑";
                clicked => {delete-clicked(option.id)}
            }
        }
    }
}

export component SelectableButtonsWithSave {
    in property options <=> btns.options;
    callback select-clicked <=> btns.select-clicked;
    callback delete-clicked <=> btns.delete-clicked;
    callback save-clicked(string);

    IHL {
        Group {
            width: 50%;
            //height: 10%;
            name: "Select";
            btns := SelectableButtons {}
        }
        Group {
            name: "Save new";

            //height: 78%;
            IVL {
                HL {
                    //height: 80px;
                    le:= LineEdit { 
                        font-size: 32px;
                    }
                    IconTouchButton {
                        text: "💾";
                        clicked => {save-clicked(le.text)}
                    }
                }
                Rectangle {}
            }
        }
    }
}

