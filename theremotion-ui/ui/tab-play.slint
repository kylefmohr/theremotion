import { Plot1D, Plot2D, Tuner } from "plot.slint";
import { Tab, Circle, Palette, Style, NotePoint, Handedness , VL, HL, IHL} from "common.slint";
import { EditMode , KeyboardFooter} from "keyboard.slint";

component PitchPlot inherits Plot2D {
    text: "Pitch";
    in property <NotePoint> raw-note: {x: 0, y: 0, volume: 0};
    in property <[NotePoint]> notes: [];
    in property <[bool]> scale-notes: [
        true, false, true, false, true, true, false, true, true, false, true, false,
        true, false, true, false, true, true, false, true, true, false, true, false,
        true, false, true, false, true, true, false, true, true, false, true, false,
        true, false, true, false, true, true, false, true, true, false, true, false,
    ];
    in property <int> root-pitch: 0;
    in property <int> highest-note: 30;

    min-x: -2.0;
    max-x: 30.0;
    min-y: 2.0;
    max-y: -30.0;

    Rectangle { // Workaround for border not clipping
        clip: true;
        width: root.width - root.border-width * 4;
        height: root.height - root.border-width * 4;
        for index in 12*4: Circle {
            border-color: Palette.plot-grad;
            border-width: mod(index, 12) == root-pitch ? Style.grad-strong-thickness : scale-notes[index] ? Style.grad-light-thickness : Style.grad-extralight-thickness;
            radius: root.to-px(highest-note - index);
            center-x: root.to-px-x(0);
            center-y: root.to-px-y(0);
            opacity: scale-notes[index] ? 1.0 : 0.5;
        }
    
        for note in notes: Circle {
            background: Palette.lead;
            radius: note.volume * 5px;
            center-x: root.to-px-x(note.x);
            center-y: root.to-px-y(note.y);
        }
    
        Circle {
            background: Palette.raw;
            radius: raw-note.volume * 4px;
            center-x: root.to-px-x(raw-note.x);
            center-y: root.to-px-y(raw-note.y);
        }
    }
}

component FilterPlot inherits Plot2D {
    text: "Filter";
    in property <float> cutoff: 0;
    in property <float> resonance: 0.5;
    min-x: -1.0;
    max-x: 1.0;
    min-y: 1.0;
    max-y: 0.0;

    Rectangle { // Workaround for border not clipping
        clip: true;
        width: root.width - root.border-width * 4;
        height: root.height - root.border-width * 4;
        Circle {
            background: Palette.raw;
            radius: 5px;
            center-x: root.to-px-x(cutoff);
            center-y: root.to-px-y(resonance);
        }
    }
}

component VolumePlot inherits Plot1D {
    text: "Volume";
    graduations: [];
    min: 0;
    max: 1;
}

component ChordNumberPlot inherits Plot1D {
    text: "Chord";
    graduations: [
        // Graduations are offset by one:
        // 1 note and half is heard like two notes
        {value: 1, text: "2"},
        {value: 2, text: "3"},
        {value: 3, text: "4"},
    ];
    min: 0;
    max: 4;
}

export component PlayingTab inherits Tab {
    // keyboard
    callback clicked <=> kb.clicked;
    in property <[bool]> scale-notes <=> kb.scale-notes;
    in property <[float]> leads <=> kb.leads;
    in property <[float]> drones <=> kb.drones;
    in property <int> root-pitch <=> kb.root-pitch;

    in property <length> gauge-width: 100px;
    in property <float> filter-cutoff: 0;
    in property <float> filter-resonance: 0;
    in property <NotePoint> raw-note: {x: 0, y: 0, volume: 0};
    in property <[NotePoint]> notes: [];
    in property <float> volume: 0;
    in property <float> chords_number: 0;
    in property <float> tuner-note: 0;
    in property <float> tuner-note-tuned: 0;
    in-out property <float> tuner-note-focus: 0;
    in property <int> highest-note: 45;
    in property <Handedness> handedness;

    VL {
        if handedness == Handedness.RightHanded: IHL {
            VolumePlot {
                width: gauge-width;
                value: volume;
            }
            FilterPlot {
                cutoff: filter-cutoff;
                resonance: filter-resonance;
                height: self.width;
            }
            PitchPlot {
                min-x: -30.0;
                max-x: 2.0;
                min-y: 2.0;
                max-y: -30.0;
                notes: notes;
                raw-note: raw-note;
                height: self.width;
                scale-notes: root.scale-notes;
                root-pitch: root.root-pitch;
                highest-note: highest-note;
            }
            ChordNumberPlot {
                width: gauge-width;
                value: chords-number;
            }
        }
        if handedness == Handedness.LeftHanded: IHL {
            spacing: 4px;
            ChordNumberPlot {
                width: gauge-width;
                value: chords-number;
            }
            PitchPlot {
                min-x: -2.0;
                max-x: 30.0;
                min-y: 2.0;
                max-y: -30.0;
                notes: notes;
                raw-note: raw-note;
                height: self.width;
                scale-notes: root.scale-notes;
                root-pitch: root.root-pitch;
                highest-note: highest-note;
            }
            Rectangle {
                horizontal-stretch: 0;
            }
            FilterPlot {
                cutoff: filter-cutoff;
                resonance: filter-resonance;
                height: self.width;
            }
            VolumePlot {
                width: gauge-width;
                value: volume;
            }
        }
        Tuner {
            note: root.tuner-note;
            note-tuned: root.tuner-note-tuned;
            note-focus: root.tuner-note-focus;
            height: 40px;
        }
        kb := KeyboardFooter {
            edit-mode: EditMode.Drone;
        }
    }
}
