import { Palette, Style, TitleText, BevelRectangle, GL, Group, StatusText, CaptionText, HL} from "common.slint";
import { PlayingTab } from "tab-play.slint";
import { SettingsTab } from "tab-settings.slint";
import { RootTab } from "tab-root.slint";
import { MixTab } from "tab-mix.slint";
import { ScaleTab } from "tab-scale.slint";
import { EffectsTab } from "tab-effects.slint";
import { PresetsTab } from "tab-presets.slint";
import { VirtualKeyboard, VirtualKeyboardHandler, KeyModel } from "virtual_keyboard.slint";
import { UIState } from "state.slint";
import { Status, Handedness } from "types.slint";

export { VirtualKeyboardHandler, KeyModel, UIState }

struct TabData {
    title: string,
    icon: string,
}

component GuitarIndicator inherits CaptionText {
    in property <bool> ready;
    text: "🎸";
    font-family: "Noto Emoji";
    opacity: ready ? 1 : 0;
    animate opacity {
        easing: ease-out;
        duration: 100ms;
    }
}

component AutotuneIndicator inherits CaptionText {
    in property <int> autotune;
    text: "🎹";
    font-family: "Noto Emoji";
    opacity: autotune / 5.0;
    animate opacity {
        easing: ease-out;
        duration: 100ms;
    }
}

export component MainWindow inherits Window {
    title: "Theremotion";
    icon: @image-url("../../assets/icon.svg");
    background: Palette.win-bg;
    preferred-width: 800px;
    preferred-height: 480px;
    min-width: 800px;
    min-height: 480px;
    property <int> active-tab;
    property <[TabData]> tabs: [
        {
            title: "Play",
            icon: "👐"
        },
        {
            title: "Root",
            icon: "🎵"
        },
        {
            title: "Scale",
            icon: "🎼",
        },
        {
            title: "Mix",
            icon: "🎚️",
        },
        {
            title: "Effects",
            icon: "🎛️",
        },
        {
            title: "Presets",
            icon: "💾",
        },
        {
            title: "Settings",
            icon: "⚙️"
        },
    ];


    // Internal
    fs := FocusScope {
        key-pressed(k) => {
            if(k.text == Key.Escape) {
                UIState.close();
                return accept;
            }
            return reject;
        }
    }

    GL {
        spacing: 0px;
        padding: 2px;

        // Tab title
        head := HorizontalLayout {
            row: 0;
            col: 0;
            padding-left: Style.area-corner-radius;
            spacing: 10px;
            alignment: LayoutAlignment.center;
            height: 45px;

            Rectangle {
                clip: true;
                width: 70px;
                BevelRectangle {
                    y: 0px;
                    height: head.height + Style.area-corner-radius;
                    background: Palette.tab-bg;
                    Group {
                        has-name: false;
                        HorizontalLayout {
                            height: head.height;
                            padding-bottom: Style.area-corner-radius;
                            CaptionText { text: UIState.has-left-hand ? "👈" : "⬜"; font-family: "Noto Emoji"; }
                            if UIState.handedness == Handedness.RightHanded: GuitarIndicator {ready: UIState.strum-ready;}
                            if UIState.handedness == Handedness.LeftHanded: AutotuneIndicator {autotune: UIState.autotune-amount;}
                        }
                    }
                }
            }

            title := Rectangle {
                clip: true;
                width: 40%;
                BevelRectangle {
                    height: title.height + self.border-radius;
                    y: 0;
                    background: Palette.tab-bg;
                    border-radius: Style.area-corner-radius;
                    HorizontalLayout {
                        padding-bottom: 7px;
                        padding-left: 20px;
                        padding-right: 20px;
                        alignment: LayoutAlignment.center;
                        TitleText { text: tabs[active-tab].title; }
                    }
                }
            }

            Rectangle {
                clip: true;
                width: 70px;
                BevelRectangle {
                    y: 0px;
                    height: head.height + Style.area-corner-radius;
                    background: Palette.tab-bg;
                    Group {
                        has-name: false;
                        HorizontalLayout {
                            height: head.height;
                            padding-bottom: Style.area-corner-radius;
                            if UIState.handedness == Handedness.LeftHanded: GuitarIndicator {ready: UIState.strum-ready;}
                            if UIState.handedness == Handedness.RightHanded: AutotuneIndicator {autotune: UIState.autotune-amount;}
                            CaptionText { text: UIState.has-right-hand? "👉" : "⬜"; font-family: "Noto Emoji"; }
                        }
                    }
                }
            }
        }

        // Tab content
        BevelRectangle {
            row: 1;
            col: 0;
            clip: true;
            background: Palette.tab-bg;
            border-radius: Style.area-corner-radius;

            PlayingTab {
                idx: 0;
                current-idx: active-tab;
            }

            RootTab {
                idx: 1;
                current-idx: active-tab;
            }

            ScaleTab {
                idx: 2;
                current-idx: active-tab;
            }

            MixTab {
                idx: 3;
                current-idx: active-tab;
            }

            EffectsTab { 
                idx: 4;
                current-idx: active-tab;
            }

            PresetsTab { 
                idx: 5;
                current-idx: active-tab;
            }

            SettingsTab {
                idx: 6;
                current-idx: active-tab;
            }
        }

        Rectangle {
            row: 1;
            col: 1;

            private property <length> icon-size: 55px;

            tab-bar := VerticalLayout {
                padding-top: Style.area-corner-radius;
                padding-bottom: Style.area-corner-radius;
                alignment: LayoutAlignment.stretch;
    
                for tab[idx] in tabs: TouchArea { 
                    forward-focus: fs;
                    width: icon-size;
                    height: icon-size;
                    Text {
                        text: tab.icon;
                        color: active-tab == idx ? Palette.win-bg : Palette.neutral-bright;
                        animate color {
                             easing: ease-out;
                             duration: 100ms;
                        }
                        font-size: 35px;
                        font-family: "Noto Emoji";
                        vertical-alignment: TextVerticalAlignment.center;
                        horizontal-alignment: TextHorizontalAlignment.center;
                    }

                    clicked => {
                        root.active-tab = idx
                    }
                }

                // Don't constraint height
                Rectangle {}
            }

            Rectangle {
                clip: true;
                z: -1;
                BevelRectangle {
                    border-radius: Style.area-corner-radius;
                    height: icon-size;
                    width: icon-size + Style.area-corner-radius;
                    x: tab-bar.x - Style.area-corner-radius;
                    y: tab-bar.padding-top + icon-size*active-tab;
                    animate y {
                         duration: 250ms;
                         easing: ease-out;
                    }
                    background: Palette.tab-bg;
                }
            }
        }
    }

    BevelRectangle {
        property <length> y-off: (UIState.status == Status.Ok ? 0px : 30px);
        x: root.width - self.width - 30px;
        y: root.height - y-off;
        width: 40%;
        background: Palette.tab-bg;
        border-radius: Style.area-corner-radius;
        animate y-off {
            easing: ease-in-out;
            duration: 500ms;
        }

        Group {
            has-name: false;
            HL {
                spacing: 4px;
                CaptionText {
                    text: "Tracking:";
                    horizontal-alignment: TextHorizontalAlignment.left;
                    vertical-alignment: TextVerticalAlignment.top;
                    font-size: 11px;
                }
                StatusText {
                    text: UIState.status-message;
                    status: UIState.status;
                    horizontal-alignment: TextHorizontalAlignment.left;
                    vertical-alignment: TextVerticalAlignment.top;
                    font-size: 11px;
                }
                Rectangle {}
            }
        }
    }

    VirtualKeyboard {
        property <length> y-off: TextInputInterface.text-input-focused && UIState.use-on-screen-keyboard ? self.height : 0;
        height: 250px;
        y: root.height - y-off;
        animate y-off {
             easing: ease-out;
             duration: 500ms;
        }
    }
}
